#!/usr/bin/env php
<?php

use Aeon\Automation\Console\AeonApplication;
use Aeon\Automation\Console\Command\GitHub;
use Aeon\Automation\Console\Command\Git;
use Aeon\Automation\Console\Command\CacheClear;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;

(function () {
    error_reporting(E_ALL);
    ini_set('display_errors', 'stderr');

    if (is_file($autoload = getcwd() . '/vendor/autoload.php')) {
        require $autoload;
    } elseif (is_file($autoload = getcwd() . '/../../autoload.php')) {
        require $autoload;
    } elseif (is_file($autoload = __DIR__ . '/../vendor/autoload.php')) {
        require($autoload);
    } elseif (is_file($autoload = __DIR__ . '/../../../autoload.php')) {
        require($autoload);
    } else {
        fwrite(STDERR,
            'You must set up the project dependencies, run the following commands:' . PHP_EOL .
            'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
            'php composer.phar install' . PHP_EOL
        );
        exit(1);
    }

    $application = new AeonApplication('aeon-automation');
    $output = new ConsoleOutput();
    $input = new ArgvInput();

    $rootDir = (\strlen(Phar::running(false)) === 0) ? \realpath(__DIR__ . '/../') : Phar::running();

    $defaultConfigPaths = [
            __DIR__,
        __DIR__ . '/../',
        __DIR__ . '/../../',
        dirname(Phar::running(false)),
        dirname(Phar::running(false)) . '/../',
        dirname(Phar::running(false)) . '/../../',
        getcwd()
    ];

    // generic
    $application->add(new CacheClear($rootDir, $defaultConfigPaths));

    // gh:
    $application->add(new GitHub\MilestoneCreate($rootDir, $defaultConfigPaths));
    $application->add(new GitHub\MilestoneList($rootDir, $defaultConfigPaths));
    $application->add(new GitHub\ReleaseList($rootDir, $defaultConfigPaths));
    $application->add(new GitHub\PullRequestsList($rootDir, $defaultConfigPaths));
    $application->add(new GitHub\PullRequestsTemplateShow($rootDir, $defaultConfigPaths));
    $application->add(new GitHub\PullRequestDescriptionCheck($rootDir, $defaultConfigPaths));
    $application->add(new GitHub\ChangelogGet($rootDir, $defaultConfigPaths));
    $application->add(new GitHub\ChangelogGenerate($rootDir, $defaultConfigPaths));
    $application->add(new GitHub\ChangelogGenerateAll($rootDir, $defaultConfigPaths));
    $application->add(new GitHub\ChangelogReleaseUnreleased($rootDir, $defaultConfigPaths));
    $application->add(new GitHub\BranchList($rootDir, $defaultConfigPaths));
    $application->add(new GitHub\TagList($rootDir, $defaultConfigPaths));
    $application->add(new GitHub\WorkflowJobList($rootDir, $defaultConfigPaths));
    $application->add(new GitHub\WorkflowTimingList($rootDir, $defaultConfigPaths));

    // git:
    $application->add(new Git\BranchList($rootDir, $defaultConfigPaths));

    $application->run($input, $output);
})();