#!/usr/bin/env php
<?php

use Aeon\Automation\Console\AeonApplication;
use Aeon\Automation\Console\Command\BranchList;
use Aeon\Automation\Console\Command\CacheClear;
use Aeon\Automation\Console\Command\ChangelogGenerate;
use Aeon\Automation\Console\Command\ChangelogGet;
use Aeon\Automation\Console\Command\ChangelogReleaseUnreleased;
use Aeon\Automation\Console\Command\ChangelogGenerateAll;
use Aeon\Automation\Console\Command\WorkflowJobList;
use Aeon\Automation\Console\Command\MilestoneCreate;
use Aeon\Automation\Console\Command\MilestoneList;
use Aeon\Automation\Console\Command\PullRequestDescriptionCheck;
use Aeon\Automation\Console\Command\PullRequestsList;
use Aeon\Automation\Console\Command\PullRequestsTemplateShow;
use Aeon\Automation\Console\Command\ReleaseList;
use Aeon\Automation\Console\Command\TagList;
use Aeon\Automation\Console\Command\WorkflowTimingList;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;

(function () {
    error_reporting(E_ALL);
    ini_set('display_errors', 'stderr');

    if (is_file($autoload = getcwd() . '/vendor/autoload.php')) {
        require $autoload;
    } elseif (is_file($autoload = getcwd() . '/../../autoload.php')) {
        require $autoload;
    } elseif (is_file($autoload = __DIR__ . '/../vendor/autoload.php')) {
        require($autoload);
    } elseif (is_file($autoload = __DIR__ . '/../../../autoload.php')) {
        require($autoload);
    } else {
        fwrite(STDERR,
            'You must set up the project dependencies, run the following commands:' . PHP_EOL .
            'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
            'php composer.phar install' . PHP_EOL
        );
        exit(1);
    }

    $application = new AeonApplication('aeon-automation');
    $output = new ConsoleOutput();
    $input = new ArgvInput();

    $rootDir = (\strlen(Phar::running(false)) === 0) ? \realpath(__DIR__ . '/../') : Phar::running();

    $defaultConfigPaths = [
            __DIR__,
        __DIR__ . '/../',
        __DIR__ . '/../../',
        dirname(Phar::running(false)),
        dirname(Phar::running(false)) . '/../',
        dirname(Phar::running(false)) . '/../../',
        getcwd()
    ];

    $application->add(new MilestoneCreate($rootDir, $defaultConfigPaths));
    $application->add(new MilestoneList($rootDir, $defaultConfigPaths));
    $application->add(new ReleaseList($rootDir, $defaultConfigPaths));
    $application->add(new PullRequestsList($rootDir, $defaultConfigPaths));
    $application->add(new PullRequestsTemplateShow($rootDir, $defaultConfigPaths));
    $application->add(new PullRequestDescriptionCheck($rootDir, $defaultConfigPaths));
    $application->add(new ChangelogGet($rootDir, $defaultConfigPaths));
    $application->add(new ChangelogGenerate($rootDir, $defaultConfigPaths));
    $application->add(new ChangelogGenerateAll($rootDir, $defaultConfigPaths));
    $application->add(new ChangelogReleaseUnreleased($rootDir, $defaultConfigPaths));
    $application->add(new BranchList($rootDir, $defaultConfigPaths));
    $application->add(new TagList($rootDir, $defaultConfigPaths));
    $application->add(new WorkflowJobList($rootDir, $defaultConfigPaths));
    $application->add(new WorkflowTimingList($rootDir, $defaultConfigPaths));
    $application->add(new CacheClear($rootDir, $defaultConfigPaths));
    $application->run($input, $output);
})();