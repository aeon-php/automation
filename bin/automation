#!/usr/bin/env php
<?php

use Aeon\Automation\Console\Command\BranchList;
use Aeon\Automation\Console\Command\CacheClear;
use Aeon\Automation\Console\Command\ChangeLogGet;
use Aeon\Automation\Console\Command\MilestoneCreate;
use Aeon\Automation\Console\Command\MilestoneList;
use Aeon\Automation\Console\Command\ProjectList;
use Aeon\Automation\Console\Command\PullRequestsList;
use Aeon\Automation\Console\Command\TagList;
use Github\Client;
use Github\HttpClient\Builder;
use Http\Client\Common\Plugin\LoggerPlugin;
use Http\Message\Formatter\FullHttpMessageFormatter;
use Monolog\Logger;
use Psr\Log\LogLevel;
use Symfony\Bridge\Monolog\Handler\ConsoleHandler;
use Symfony\Component\Cache\Adapter\FilesystemAdapter;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Logger\ConsoleLogger;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\OutputInterface;

require_once __DIR__ . '/../vendor/autoload.php';

(function () {
    error_reporting(E_ALL);
    ini_set('display_errors', 'stderr');

    require __DIR__ . '/../vendor/autoload.php';

    $application = new Application('aeon-automation');

    $output = new ConsoleOutput();
    $input = new ArgvInput();

    $verbosityLevelMap = [
        LogLevel::INFO => OutputInterface::VERBOSITY_VERBOSE,
    ];

    $formatLevelMap = [
        LogLevel::ERROR => ConsoleLogger::ERROR,
        LogLevel::CRITICAL => ConsoleLogger::ERROR,
        LogLevel::INFO    => ConsoleLogger::INFO,
    ];

    $logger = new ConsoleLogger($output, $verbosityLevelMap, $formatLevelMap);


    $builder = new Builder();
    $builder->addPlugin(new LoggerPlugin($logger)); // TODO: Set based on verbosity
    $client = new Client($builder);
    $client->addCache($cache = new FilesystemAdapter('aeon-automation'));

    $defaultConfigPaths = [
            __DIR__,
        __DIR__ . '/../',
        __DIR__ . '/../../',
        dirname(Phar::running(false)),
        dirname(Phar::running(false)) . '/../',
        dirname(Phar::running(false)) . '/../../',
        getcwd()
    ];

    $application->add(new ProjectList($client, $defaultConfigPaths));
    $application->add(new MilestoneCreate($client, $defaultConfigPaths));
    $application->add(new MilestoneList($client, $defaultConfigPaths));
    $application->add(new PullRequestsList($client, $defaultConfigPaths));
    $application->add(new ChangeLogGet($client, $defaultConfigPaths));
    $application->add(new BranchList($client, $defaultConfigPaths));
    $application->add(new TagList($client, $defaultConfigPaths));
    $application->add(new CacheClear($cache));
    $application->run($input, $output);
})();